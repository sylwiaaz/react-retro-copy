{"version":3,"sources":["store/reducers/boardReducer.ts","store/reducers/authReducer.ts","store/index.ts","firebase/fb.config.ts","components/AuthIsLoaded/AuthIsLoaded.tsx","components/SignedOutLinks/SignedOutLinks.tsx","components/SignedInLinks/SignedInLinks.tsx","components/Navbar/Navbar.tsx","components/Layout/Layout.tsx","components/Routes/PublicRoute.tsx","components/Routes/ProtectedRoute.tsx","components/Alert/Alert.tsx","views/Login/Login.tsx","views/Register/Register.tsx","firebase/apiMethods.tsx","store/actions/boardActions.ts","components/BoardItem/BoardItem.tsx","views/Home/Home.tsx","components/Textarea/Textarea.tsx","components/Note/Note.tsx","components/AddButton/AddButton.tsx","components/Column/Column.tsx","views/Board/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","boardReducer","createReducer","LOAD_BOARDS","state","action","payload","boards","REMOVE_BOARD","boardID","filter","boardItem","id","ADD_BOARD","ADD_COLUMN","column","map","board","columnsByID","REMOVE_COLUMN","columnID","columnId","REORDER_COLUMNS","sourceIndex","destinationIndex","newColumnList","splice","columnsReducer","LOAD_DATA","columns","EDIT_COLUMN_NAME","columnName","name","ADD_NOTE","note","notesByID","REMOVE_NOTE","noteID","newNotes","REORDER_NOTES","sourceID","destinationID","columnStart","find","newNotesList","destinationNotesList","notesReducer","notes","EDIT_NOTE_CONTENT","content","HANDLE_LIKE","likeAuthor","newLikesArray","likes","includes","author","push","notesIDs","newState","forEach","authSlice","createSlice","user","isAuth","reducers","login","logout","signup","console","log","actions","firebase","auth","combineReducers","authReducer","firebaseReducer","firestore","firestoreReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","db","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","reduxFirebase","dispatch","createFirestoreInstance","config","userProfile","useFirestoreForProfile","AuthIsLoaded","children","useSelector","isLoaded","className","CircularProgress","size","SignedOutLinks","to","SignedInLinks","useDispatch","initials","profile","Avatar","onClick","signOut","then","Navbar","isAuthUser","uid","Layout","PublicRoute","Component","component","rest","render","props","ProtectedRoute","Alert","elevation","variant","Login","useState","authError","setAuthError","open","setOpenSnackbar","password","showPassword","email","values","setValues","handleChange","prop","event","target","value","handleClose","reason","onSubmit","e","preventDefault","signInWithEmailAndPassword","catch","err","message","TextField","required","fullWidth","label","onChange","FormControl","InputLabel","htmlFor","OutlinedInput","type","endAdornment","InputAdornment","position","IconButton","aria-label","onMouseDown","edge","Button","color","disabled","length","validateForm","Snackbar","autoHideDuration","onClose","severity","Register","validEmailRegex","RegExp","firstName","lastName","errors","error","test","createUserWithEmailAndPassword","data","collection","doc","set","toUpperCase","noValidate","helperText","FormHelperText","getBoards","authorID","boardsArray","where","get","docs","boardData","createBoard","boardTitle","add","deleteBoard","collectionPath","delete","getColumnsAndNotes","collection_names","itemRefs","Promise","all","updateColumnsOrder","boardDoc","update","createColumn","itemData","deleteColumn","editColumn","updateNotesOrder","sourceColumnData","destinationColData","sourceColumnDoc","destinationColDoc","createNote","columnsDoc","deleteNote","noteId","editNoteText","handleLikeInNote","noteData","updatedLikesArray","noteDoc","userID","loadBoards","a","BoardItem","title","Home","setBoardTitle","useEffect","boardsList","key","placeholder","addBoard","Textarea","onBlur","autoFocus","onFocus","tempValue","onKeyDown","cb","handleKeyDown","Note","index","isLikedNote","setLikedNote","setValue","openInput","setOpenInput","handleRemoveNote","removeNote","handleAddLike","handleClick","handleOnChange","handleBlur","trim","editNoteContent","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","style","fontSize","AddButton","btnStyle","useParams","formOpen","setFormOpen","textAreaText","setText","handleOpenForm","handleTextChange","handleAddColumn","addColumn","handleAddNote","addNote","closeForm","btnTitle","formStyle","renderForm","buttonText","renderAddButton","Column","handleRemoveColumn","removeColumn","noteList","droppableId","droppableProps","Board","loadColumnsAndNotes","columnList","onDragEnd","result","destination","source","reorderColumns","direction","App","basename","path","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd675edc.chunk.js","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\nimport {\n   IBoard,\n   IColumn,\n   IAddBoardAction,\n   IAddColumnAction,\n   IAddNoteAction,\n   IEditColumnNameAction,\n   IEditNoteContentAction,\n   IHandleLikeAction,\n   ILoadBoardsAction,\n   ILoadColumnsAndNotes,\n   IRemoveBoardAction, IRemoveColumnAction,\n   IRemoveNoteAction,\n   IReorderColumnsAction, IReorderNotes,\n   INote\n} from 'interfaces';\n\n\nconst initialState: any[] = [];\n\n\n// BOARDS\nconst loadBoards = (state: IBoard[], action: ILoadBoardsAction) => {\n   const { boards } = action.payload;\n   return boards;\n};\n\nconst addBoard = (state: IBoard[], action: IAddBoardAction) => {\n   return [...state, { ...action.payload }]\n};\n\nconst removeBoard = (state: IBoard[], action: IRemoveBoardAction) => {\n   const { boardID } = action.payload;\n   return state.filter((boardItem: any) => boardItem.id !== boardID)\n}\n\n// const loadBoard = (state: Board[], action: any) => {\n//     const { board } = action.payload;\n//     return board;\n// };\n\nconst addColumnWithinBoard = (state: IBoard[], action: IAddColumnAction) => {\n   const { id, boardID } = action.payload.column;\n\n   return state.map((board: IBoard) => {\n      if (board.id === boardID) {\n         return { ...board, columnsByID: [...board.columnsByID, id] }\n      } else {\n         return board;\n      }\n   })\n};\n\nconst removeColumnWithinBoard = (state: IBoard[], action: IRemoveColumnAction) => {\n   const { columnID, boardID } = action.payload;\n\n   return state.map((board: IBoard) => {\n      if (board.id === boardID) {\n         return { ...board, columnsByID: board.columnsByID.filter((columnId: string) => columnID !== columnId) }\n      }\n      return board;\n   })\n};\n\nconst reorderColumns = (state: IBoard[], action: IReorderColumnsAction) => {\n   const { boardID, sourceIndex, destinationIndex } = action.payload;\n   return state.map((board: IBoard) => {\n      if (board.id === boardID) {\n         let newColumnList = [...board.columnsByID];\n         const column = newColumnList.splice(sourceIndex, 1);\n         newColumnList.splice(destinationIndex, 0, ...column);\n         return { ...board, columnsByID: newColumnList };\n      } else {\n         return board;\n      }\n   })\n};\n\n\n// COLUMNS\nconst loadColumns = (state: IColumn[], action: ILoadColumnsAndNotes) => {\n   const { columns } = action.payload;\n   return columns;\n};\n\nconst addNewColumn = (state: IColumn[], action: IAddColumnAction) => {\n   return [...state, action.payload.column];\n};\n\nconst removeColumn = (state: IColumn[], action: IRemoveColumnAction) => {\n   return state.filter((column: IColumn) => column.id !== action.payload.columnID);\n};\n\nconst editColumnName = (state: IColumn[], action: IEditColumnNameAction) => {\n   const { columnID, columnName } = action.payload;\n   return state.map((column: IColumn) => {\n      if (column.id === columnID && column.name !== columnName) {\n         return { ...column, name: columnName };\n      }\n      return { ...column };\n   });\n};\n\nconst addNoteWithinColumn = (state: IColumn[], action: IAddNoteAction) => {\n   const { columnID, id } = action.payload.note;\n   return state.map((column: IColumn) => {\n      if (column.id === columnID) {\n         return { ...column, notesByID: [...column.notesByID, id] }\n      }\n      return column;\n   });\n};\n\nconst deleteNoteWithinColumn = (state: IColumn[], action: IRemoveNoteAction) => {\n   const { columnID, noteID } = action.payload;\n   return state.map((column: IColumn) => {\n      if (column.id === columnID) {\n         const newNotes = column.notesByID.filter(note => note !== noteID);\n         return { ...column, notesByID: newNotes }\n      }\n      return column;\n   })\n}\n\nconst reorderNotes = (state: IColumn[], action: IReorderNotes) => {\n   const { sourceIndex, destinationIndex, sourceID, destinationID } = action.payload;\n\n   const columnStart = state.find(column => column.id === sourceID);\n   if (!columnStart) return;\n   const newNotesList = [...columnStart.notesByID];\n   const [note] = newNotesList.splice(sourceIndex, 1);\n   return state.map((column: IColumn) => {\n          if (column.id === sourceID && sourceID === destinationID) {\n             // drag and drop note in same column\n             newNotesList.splice(destinationIndex, 0, note);\n             return { ...column, notesByID: newNotesList };\n          } else if (column.id === sourceID && sourceID !== destinationID) {\n             // drag and drop note between different columns\n             return { ...column, notesByID: newNotesList };\n          } else if (column.id === destinationID && sourceID !== destinationID) {\n             // drag and drop note between different columns\n             const destinationNotesList = [...column.notesByID];\n             destinationNotesList.splice(destinationIndex, 0, note);\n             return { ...column, notesByID: destinationNotesList };\n          }\n          return column;\n       }\n   )\n}\n\n// NOTES\nconst loadNotes = (state: INote[], action: ILoadColumnsAndNotes) => {\n   const { notes } = action.payload;\n   return notes;\n}\n\nconst addNewNote = (state: INote[], action: IAddNoteAction) => {\n   const { note } = action.payload;\n   return [...state, note];\n};\n\nconst removeNote = (state: INote[], action: IRemoveNoteAction) => {\n   return state.filter((note: INote) => note.id !== action.payload.noteID);\n};\n\nconst likeHandle = (state: INote[], action: IHandleLikeAction) => {\n   const { noteID, likeAuthor } = action.payload;\n   return state.map((note: INote) => {\n      if (note.id === noteID) {\n         let newLikesArray = [...note.likes];\n         if (!newLikesArray.includes(likeAuthor)) {\n            newLikesArray.push(likeAuthor);\n         } else {\n            newLikesArray = newLikesArray.filter(author => author !== likeAuthor);\n         }\n         return { ...note, likes: newLikesArray };\n      } else {\n         return note;\n      }\n   });\n};\n\nconst editNoteContent = (state: INote[], action: IEditNoteContentAction) => {\n   const { noteID, content } = action.payload;\n   return state.map((note: INote) => {\n      if (note.id === noteID && note.content !== content) {\n         return { ...note, content: content };\n      }\n      return { ...note };\n   });\n};\n\nconst removeNotesWithColumn = (state: INote[], action: IRemoveColumnAction) => {\n   const { notesIDs } = action.payload;\n   let newState = [...state];\n   notesIDs.forEach((noteID: string) => {\n      newState = state.filter((note: INote) => note.id !== noteID);\n   })\n   return newState;\n}\n\n\nconst boardReducer = createReducer(initialState, {\n   LOAD_BOARDS: loadBoards,\n   REMOVE_BOARD: removeBoard,\n   ADD_BOARD: addBoard,\n   // LOAD_BOARD: loadBoard,\n   ADD_COLUMN: addColumnWithinBoard,\n   REMOVE_COLUMN: removeColumnWithinBoard,\n   REORDER_COLUMNS: reorderColumns\n});\n\nconst columnsReducer = createReducer(initialState, {\n   LOAD_DATA: loadColumns,\n   ADD_COLUMN: addNewColumn,\n   REMOVE_COLUMN: removeColumn,\n   EDIT_COLUMN_NAME: editColumnName,\n   ADD_NOTE: addNoteWithinColumn,\n   REMOVE_NOTE: deleteNoteWithinColumn,\n   REORDER_NOTES: reorderNotes\n});\n\nconst notesReducer = createReducer(initialState, {\n   LOAD_DATA: loadNotes,\n   ADD_NOTE: addNewNote,\n   REMOVE_NOTE: removeNote,\n   EDIT_NOTE_CONTENT: editNoteContent,\n   HANDLE_LIKE: likeHandle,\n   REMOVE_COLUMN: removeNotesWithColumn\n});\n\nexport { boardReducer, columnsReducer, notesReducer };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../index';\n\ntype IAuthState = {\n    user: {\n        email: string,\n        firstName?: string,\n        lastName?: string\n    } | null,\n    isAuth: boolean\n}\n\nconst initialState = {\n    user: null,\n    isAuth: false\n};\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        login: (state: IAuthState, action: PayloadAction<{ email: string }>) => {\n            state.user = action.payload;\n            state.isAuth = true;\n        },\n        logout: (state: IAuthState) => {\n            state.user = null;\n            state.isAuth = false;\n        },\n        signup: (state: IAuthState, action: PayloadAction<{ email: string, firstName: string, lastName: string }>) => {\n            console.log(action);\n            state.user = action.payload;\n            state.isAuth = true;\n        }\n    }\n});\n\n\nexport const { logout, signup, login } = authSlice.actions;\n\nexport const isAuth = (state: RootState) => state.firebase.auth;\nexport default authSlice.reducer;\n","import { Action, combineReducers, configureStore, getDefaultMiddleware, ThunkAction } from '@reduxjs/toolkit';\nimport { boardReducer, columnsReducer, notesReducer } from './reducers/boardReducer';\nimport authReducer from './reducers/authReducer';\nimport { firebaseReducer } from 'react-redux-firebase';\nimport { firestoreReducer } from 'redux-firestore';\n\nconst reducers = combineReducers({\n   boards: boardReducer,\n   columns: columnsReducer,\n   notes: notesReducer,\n   auth: authReducer,\n   firebase: firebaseReducer,\n   firestore: firestoreReducer\n})\n\nconst store = configureStore({\n   reducer: reducers,\n   middleware: [...getDefaultMiddleware({ serializableCheck: false })]\n});\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch;\nexport type AppThunk = ThunkAction<void, RootState, any, Action>;\n\nexport { store };\n","import firebase from 'firebase';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { store } from 'store';\nimport { createFirestoreInstance } from 'redux-firestore';\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyATCY-nJvCHD3QcO9RagpZuJ5r6HEmUYwM',\n    authDomain: 'taskapp-42466.firebaseapp.com',\n    databaseURL: 'https://taskapp-42466.firebaseio.com',\n    projectId: 'taskapp-42466',\n    storageBucket: 'taskapp-42466.appspot.com',\n    messagingSenderId: '606669051532',\n    appId: '1:606669051532:web:19a94f1dc32b3021940da9'\n};\n\n\n// Initialize Firebase\nconst fb = firebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst auth = firebase.auth();\n\n\nconst reduxFirebase = {\n    firebase,\n    dispatch: store.dispatch,\n    createFirestoreInstance: createFirestoreInstance,\n    config: {\n        userProfile: 'users',\n        useFirestoreForProfile: true\n    }\n};\n\nexport { fb, db, reduxFirebase, auth, firebaseConfig };\n","import React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { isLoaded } from 'react-redux-firebase';\nimport { isAuth } from 'store/reducers/authReducer';\nimport { CircularProgress } from '@material-ui/core';\n\n\nconst AuthIsLoaded: FunctionComponent = ({ children }: any) => {\n   const auth = useSelector(isAuth);\n\n   return (\n       !isLoaded(auth) ? (<div className='loading-wrapper'><CircularProgress size={200}/></div>) : (children)\n   );\n};\n\nexport default AuthIsLoaded;\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst SignedOutLinks: FunctionComponent = () => {\n    return (\n        <ul className='links-list'>\n            <li><Link to='/register' className=\"auth-btn\">Sign up</Link></li>\n            <li><Link to='/login' className=\"auth-btn\">Log in</Link></li>\n        </ul>\n    )\n};\n\nexport default SignedOutLinks;\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from 'store/reducers/authReducer';\nimport { auth } from 'firebase/fb.config';\nimport { Avatar } from '@material-ui/core';\nimport { RootState } from 'store';\n\nconst SignedInLinks: FunctionComponent = () => {\n\n    const dispatch = useDispatch();\n    const { initials } = useSelector((state: RootState) => state.firebase.profile);\n\n    const handleLogOut = (): void => {\n        auth.signOut()\n            .then(() => {\n                dispatch(logout());\n            });\n    };\n\n    return (\n        <ul className='links-list'>\n            <li><Link to='/'><Avatar>{initials}</Avatar></Link></li>\n            <li><Link to='/' onClick={handleLogOut} className='auth-btn'>Log out</Link></li>\n        </ul>\n    );\n};\n\nexport default SignedInLinks;\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport SignedOutLinks from '../SignedOutLinks/SignedOutLinks';\nimport SignedInLinks from '../SignedInLinks/SignedInLinks';\nimport './navbar.scss';\nimport { useSelector } from 'react-redux';\nimport { isAuth } from 'store/reducers/authReducer';\n\n\nconst Navbar: FunctionComponent = () => {\n\n    const isAuthUser = useSelector(isAuth);\n\n    return (\n        <nav className='nav-wrapper'>\n            <Link to='/' className='app-name'>Taskapp</Link>\n            {!isAuthUser.uid ? <SignedOutLinks/> : <SignedInLinks/>}\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import React, { FunctionComponent } from 'react';\nimport Navbar from '../Navbar/Navbar';\nimport './layout.scss';\n\nconst Layout: FunctionComponent = ({ children }): JSX.Element => {\n    return (\n        <div className='container'>\n            <Navbar/>\n            <div className='content-wrapper'>\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default Layout;\n","import React, { FunctionComponent } from 'react';\nimport { Redirect, Route, RouteComponentProps } from 'react-router-dom';\n\ninterface IProps {\n   component: (props: RouteComponentProps) => JSX.Element | null,\n   path: string,\n   exact: boolean,\n   isAuth?: boolean\n}\n\nconst PublicRoute: FunctionComponent<IProps> = ({ component: Component, isAuth, ...rest }) => {\n   return (\n       <Route {...rest} render={(props) => isAuth ? <Redirect to='/'/> : <Component {...props}/>}/>\n   );\n};\n\nexport default PublicRoute;\n","import React, { FunctionComponent } from 'react';\nimport { RouteComponentProps, Redirect, Route } from 'react-router-dom';\n\ninterface IProps {\n   component: (props: RouteComponentProps) => JSX.Element | null,\n   path: string,\n   exact: boolean,\n   isAuth?: boolean\n}\n\nconst ProtectedRoute: FunctionComponent<IProps> = ({ component: Component, isAuth, ...rest }) => {\n   return (\n       <Route {...rest} render={(props: RouteComponentProps) => isAuth ? <Component {...props}/> : <Redirect to='/login'/>}/>\n   );\n};\n\nexport default ProtectedRoute;\n","import React from 'react';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst Alert = (props: any): JSX.Element => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default Alert;\n","import React, { FunctionComponent, SyntheticEvent, useState } from 'react';\nimport {\n   Button,\n   FormControl,\n   IconButton,\n   InputAdornment,\n   InputLabel,\n   OutlinedInput,\n   TextField,\n   Snackbar\n} from '@material-ui/core';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport { useDispatch } from 'react-redux';\nimport { auth } from 'firebase/fb.config';\nimport { login } from 'store/reducers/authReducer';\nimport Alert from 'components/Alert/Alert';\n\n\nconst Login: FunctionComponent<RouteComponentProps> = (): JSX.Element => {\n\n   const dispatch = useDispatch();\n\n   const [authError, setAuthError] = useState<string>('');\n   const [open, setOpenSnackbar] = useState(false);\n   const [values, setValues] = useState({\n      password: '',\n      showPassword: false,\n      email: ''\n   });\n\n   const handleChange = (prop: string) => (event: React.ChangeEvent<HTMLInputElement>): void => {\n      setValues({ ...values, [prop]: event.target.value });\n   };\n\n   const handleClickShowPassword = (): void => {\n      setValues({ ...values, showPassword: !values.showPassword });\n   };\n\n   const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>): void => {\n      event.preventDefault();\n   };\n\n   const handleClose = (event: SyntheticEvent<Element, Event>, reason: string): void => {\n      if (reason === 'clickaway') {\n         return;\n      }\n      setOpenSnackbar(false);\n   };\n\n   const handleSubmit = (e: React.FormEvent): void => {\n      const { password, email } = values;\n      e.preventDefault();\n      auth.signInWithEmailAndPassword(email, password)\n          .then(() => {\n             dispatch(login({ email }));\n          })\n          .catch(err => {\n             setAuthError(err.message);\n             setOpenSnackbar(true);\n          });\n   };\n\n   const validateForm = (): boolean => {\n      const { email, password } = values;\n      return (!!email && password.length > 7);\n   }\n\n   return (\n       <div className='form-wrapper'>\n          <form className='login-form form' onSubmit={handleSubmit}>\n             <h4 className='form-title'>Login</h4>\n             <TextField\n                 name=\"email\"\n                 variant=\"outlined\"\n                 required\n                 fullWidth\n                 id=\"email\"\n                 label=\"Email address\"\n                 value={values.email}\n                 onChange={handleChange('email')}\n             />\n             <FormControl variant=\"outlined\" fullWidth required>\n                <InputLabel htmlFor=\"password\">Password</InputLabel>\n                <OutlinedInput\n                    id=\"password\"\n                    type={values.showPassword ? 'text' : 'password'}\n                    value={values.password}\n                    onChange={handleChange('password')}\n                    endAdornment={\n                       <InputAdornment position=\"end\">\n                          <IconButton\n                              aria-label=\"toggle password visibility\"\n                              onClick={handleClickShowPassword}\n                              onMouseDown={handleMouseDownPassword}\n                              edge=\"end\">\n                             {values.showPassword ? <VisibilityIcon/> : <VisibilityOffIcon/>}\n                          </IconButton>\n                       </InputAdornment>}\n                />\n             </FormControl>\n             <span className='required-info'>* this fields are required</span>\n             <Button\n                 type=\"submit\"\n                 variant=\"contained\"\n                 color=\"primary\"\n                 size='large'\n                 disabled={!validateForm()}>\n                Login\n             </Button>\n             <Link to=\"/register\" className='link-to'>\n                Don't have an account? Sign Up\n             </Link>\n          </form>\n          <Snackbar open={open} autoHideDuration={5000} onClose={handleClose}>\n             <Alert onClose={handleClose} severity=\"error\">{authError}</Alert>\n          </Snackbar>\n       </div>\n   );\n};\n\nexport default Login;\n","import React, { FunctionComponent, SyntheticEvent, useState } from 'react';\nimport {\n    Button,\n    FormControl, FormHelperText,\n    IconButton,\n    InputAdornment,\n    InputLabel,\n    OutlinedInput, Snackbar,\n    TextField\n} from '@material-ui/core';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport './register.scss';\nimport { useDispatch } from 'react-redux';\nimport { signup } from 'store/reducers/authReducer';\nimport { auth, db } from 'firebase/fb.config';\nimport firebase from 'firebase';\nimport Alert from 'components/Alert/Alert';\n\n\nconst Register: FunctionComponent<RouteComponentProps> = (): JSX.Element => {\n\n    const validEmailRegex = new RegExp(/[a-z0-9._%+-]+@[a-z0-9.-]+[.][a-z]{2,}$/);\n    const dispatch = useDispatch();\n\n    const [open, setOpenSnackbar] = useState<boolean>(false);\n    const [authError, setAuthError] = useState<string>('');\n    const [values, setValues] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        showPassword: false,\n        errors: { email: '', password: '', lastName: '', firstName: '' }\n    });\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const { name, value } = event.target;\n        let error;\n\n        switch (name) {\n            case 'email':\n                error = validEmailRegex.test(value) ? '' : 'Enter valid email address';\n                break;\n            case 'password':\n                error = value.length < 8 ? 'Password must be 8 characters long!' : '';\n                break;\n            case 'firstName':\n            case 'lastName':\n                error = value.length < 3 ? 'This field should contain at least 3 characters.' : '';\n                break;\n            default:\n                error = '';\n                break;\n        }\n\n        setValues({ ...values, [name]: value, errors: { ...values.errors, [name]: error } });\n    };\n\n    const handleClose = (event: SyntheticEvent<Element, Event>, reason: string): void => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenSnackbar(false);\n    };\n\n    const handleClickShowPassword = (): void => {\n        setValues({ ...values, showPassword: !values.showPassword });\n    };\n\n    const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>): void => {\n        event.preventDefault();\n    };\n\n    const validateForm = (): boolean => {\n        const { firstName, lastName, email, password } = values;\n        return (\n            firstName.length > 3 &&\n            lastName.length > 3 &&\n            validEmailRegex.test(email) &&\n            password.length > 7);\n    }\n\n    const submitForm = (e: React.FormEvent): void => {\n        const { firstName, lastName, email, password } = values;\n        e.preventDefault();\n        auth.createUserWithEmailAndPassword(email, password)\n            .then((data: firebase.auth.UserCredential) => {\n                if (!data.user) return;\n                db.collection('users').doc(data.user.uid).set({\n                    firstName,\n                    lastName,\n                    initials: firstName[0].toUpperCase() + lastName[0].toUpperCase(),\n                    email\n                });\n            })\n            .then(() => {\n                dispatch(signup({ firstName, lastName, email }));\n            })\n            .catch(err => {\n                setAuthError(err.message);\n                setOpenSnackbar(true);\n            });\n    };\n\n    return (\n        <div className='form-wrapper'>\n            <form className='register-form form' onSubmit={submitForm} noValidate>\n                <h4 className='form-title'>Register</h4>\n                <TextField\n                    name=\"firstName\"\n                    variant=\"outlined\"\n                    required\n                    fullWidth\n                    id=\"firstName\"\n                    label=\"First Name\"\n                    value={values.firstName}\n                    onChange={handleChange}\n                    helperText={values.errors.firstName}\n                    error={!!values.errors.firstName}\n                />\n                <TextField\n                    name=\"lastName\"\n                    variant=\"outlined\"\n                    required\n                    fullWidth\n                    id=\"lastName\"\n                    label=\"Last Name\"\n                    value={values.lastName}\n                    onChange={handleChange}\n                    helperText={values.errors.lastName}\n                    error={!!values.errors.lastName}\n                />\n                <TextField\n                    name=\"email\"\n                    variant=\"outlined\"\n                    required\n                    fullWidth\n                    id=\"email\"\n                    label=\"Email Address\"\n                    type='email'\n                    value={values.email}\n                    onChange={handleChange}\n                    helperText={values.errors.email}\n                    error={!!values.errors.email}\n                />\n                <FormControl variant=\"outlined\" fullWidth required error={!!values.errors.password}>\n                    <InputLabel htmlFor=\"password\">Password</InputLabel>\n                    <OutlinedInput\n                        id=\"password\"\n                        name='password'\n                        type={values.showPassword ? 'text' : 'password'}\n                        value={values.password}\n                        onChange={handleChange}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleClickShowPassword}\n                                    onMouseDown={handleMouseDownPassword}\n                                    edge=\"end\"\n                                >\n                                    {values.showPassword ? <VisibilityIcon/> : <VisibilityOffIcon/>}\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                    />\n                    <FormHelperText error>{values.errors.password}</FormHelperText>\n                </FormControl>\n                <span className='required-info'>* this fields are required</span>\n                <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size='large'\n                    disabled={!validateForm()}\n                >Sign up</Button>\n                <Link to=\"/login\" className='link-to'>\n                    Already have an account? Sign in\n                </Link>\n            </form>\n            <Snackbar open={open} autoHideDuration={5000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\">{authError}</Alert>\n            </Snackbar>\n        </div>\n    );\n};\n\nexport default Register;\n","import { db } from './fb.config';\nimport { IBoard, IColumn, INote } from 'interfaces';\n\n//BOARD\nexport const getBoards = (authorID: string) => {\n   const boardsArray: IBoard[] = [];\n   return db.collection('boards')\n       .where('authorID', '==', authorID)\n       .get()\n       .then((data: any) => {\n          data.docs.forEach((board: any) => {\n             const boardData = { ...board.data(), id: board.id };\n             boardsArray.push(boardData);\n          });\n          return boardsArray;\n       })\n};\n\nexport const getBoard = (id: string) => {\n   return db.collection('boards').where('boardID', '==', id).get().then(data => {\n      data.docs.forEach(board => {\n         return { ...board.data(), id: board.id };\n      });\n   })\n};\n\nexport const createBoard = (authorID: string, boardTitle: string) => {\n   return db.collection('boards').add({\n      authorID,\n      boardTitle,\n      columnsByID: []\n   });\n};\n\nexport const deleteBoard = (id: string) => {\n   const collections = ['columns', 'notes'];\n\n   collections.forEach((collection: string) => {\n      const collectionPath = db.collection(collection);\n      collectionPath.where('boardID', '==', id)\n          .get()\n          .then(data => {\n             data.docs.map(doc => doc.id).forEach(id => collectionPath.doc(id).delete());\n          });\n   });\n   return db.collection('boards')\n       .doc(id)\n       .delete()\n}\n\nexport const getColumnsAndNotes = (collection_names: string[], boardID: string) => {\n   let itemRefs = collection_names.map((name: string) => {\n      return db.collection(name)\n          .where('boardID', '==', boardID)\n          .get()\n          .then((data) => {\n             let collection: any[] = [];\n             data.docs.forEach(doc => {\n                collection.push({ ...doc.data(), id: doc.id });\n             });\n             return collection;\n          })\n   });\n   return Promise.all(itemRefs);\n};\n\nexport const updateColumnsOrder = (boardID: string, sourceIndex: number, destinationIndex: number) => {\n   const boardDoc = db.collection('boards').doc(boardID);\n   let boardData: any;\n   boardDoc.get().then((data: any) => {\n      boardData = data.data();\n      let newColumnList = [...boardData.columnsByID];\n      const column = newColumnList.splice(sourceIndex, 1);\n      newColumnList.splice(destinationIndex, 0, ...column);\n      boardDoc.update('columnsByID', newColumnList);\n   })\n}\n\n//COLUMNS\nexport const getColumns = (authorID: string, boardID: string) => {\n   const columnsArray: IColumn[] = [];\n\n   return db.collection('columns')\n       .where('boardID', '==', boardID)\n       .get()\n       .then(data => {\n          data.docs.forEach((column: any) => {\n             const columnData = { ...column.data(), id: column.id };\n             columnsArray.push(columnData);\n          });\n          return columnsArray;\n       })\n}\n\nexport const createColumn = (authorID: string, name: string, boardID: string) => {\n   const boardDoc = db.collection('boards').doc(boardID);\n   let board: any;\n   return boardDoc.get()\n       .then(itemData => board = itemData.data())\n       .then(() => db.collection('columns').add({\n          authorID,\n          name,\n          boardID,\n          notesByID: []\n       }))\n       .then(column => {\n          boardDoc.update('columnsByID', [...board.columnsByID, column.id])\n          return column;\n       })\n}\n\nexport const deleteColumn = (columnID: string, boardID: string, notesIDs: string[]) => {\n   const boardDoc = db.collection('boards').doc(boardID);\n   let board: any;\n   return boardDoc.get()\n       .then(itemData => board = itemData.data())\n       .then(() => boardDoc.update('columnsByID', board.columnsByID.filter((columnId: string) => columnID !== columnId)))\n       .then(() => notesIDs.forEach(noteID => db.collection('notes').doc(noteID).delete()))\n       .then(() => db.collection('columns').doc(columnID).delete())\n}\n\nexport const editColumn = (columnName: string, columnID: string) => {\n   return db.collection('columns').doc(columnID).update('name', columnName);\n}\n\nexport const updateNotesOrder = (boardID: string, noteID: string, sourceID: string, destinationID: string, sourceIndex: number, destinationIndex: number) => {\n   const sourceColumnDoc = db.collection('columns').doc(sourceID);\n   const destinationColDoc = db.collection('columns').doc(destinationID);\n   let sourceColumnData: any;\n   let destinationColData: any;\n\n   sourceColumnDoc.get()\n       .then((data: any) => {\n          sourceColumnData = data.data();\n          let newNotesList = [...sourceColumnData.notesByID];\n          newNotesList.splice(sourceIndex, 1);\n          sourceColumnDoc.update('notesByID', newNotesList);\n       })\n       .then(() => {\n          destinationColDoc.get().then((data: any) => {\n             destinationColData = data.data();\n             let newNotesList = [...destinationColData.notesByID];\n             newNotesList.splice(destinationIndex, 0, noteID);\n             destinationColDoc.update('notesByID', newNotesList);\n          })\n       })\n}\n\n\n//NOTES\nexport const getNotes = (authorID: string, boardID?: string) => {\n   const notesArray: INote[] = [];\n\n   return db.collection('notes')\n       .where('boardID', '==', boardID)\n       .get()\n       .then(data => {\n          data.docs.forEach((note: any) => {\n             const columnData = { ...note.data(), id: note.id };\n             notesArray.push(columnData);\n          });\n          return notesArray;\n       })\n}\n\nexport const createNote = (authorID: string, content: string, columnID: string, boardID: string) => {\n   const columnsDoc = db.collection('columns').doc(columnID);\n   let column: any;\n   return columnsDoc.get()\n       .then(itemData => column = itemData.data())\n       .then(() => db.collection('notes').add({\n          authorID,\n          boardID,\n          likes: [],\n          content,\n          columnID\n       }))\n       .then(note => {\n          columnsDoc.update('notesByID', [...column.notesByID, note.id])\n          return note;\n       })\n}\n\nexport const deleteNote = (noteID: string, columnID: string) => {\n   const columnsDoc = db.collection('columns').doc(columnID);\n   let column: any;\n   return columnsDoc.get()\n       .then(itemData => column = itemData.data())\n       .then(() => columnsDoc.update('notesByID', column.notesByID.filter((noteId: string) => noteID !== noteId)))\n       .then(() => db.collection('notes').doc(noteID).delete())\n}\n\nexport const editNoteText = (noteID: string, content: string) => {\n   return db.collection('notes').doc(noteID).update('content', content);\n}\n\nexport const handleLikeInNote = (noteID: string, likeAuthor: string) => {\n   let noteData: any;\n   let updatedLikesArray: any;\n   const noteDoc = db.collection('notes').doc(noteID);\n   return noteDoc.get().then(data => {\n      noteData = data.data();\n      if (noteData.likes.find((userID: string) => likeAuthor === userID)) {\n         updatedLikesArray = noteData.likes.filter((userID: string) => userID !== likeAuthor)\n      } else {\n         updatedLikesArray = [...noteData.likes, likeAuthor];\n      }\n      noteDoc.update('likes', updatedLikesArray);\n   })\n}\n","import { IBoard } from 'interfaces/board';\nimport {\n   createBoard,\n   createColumn,\n   createNote,\n   deleteBoard,\n   deleteColumn,\n   deleteNote,\n   editColumn,\n   editNoteText,\n   getBoards,\n   getColumnsAndNotes,\n   handleLikeInNote,\n   updateColumnsOrder,\n   updateNotesOrder\n} from 'firebase/apiMethods';\nimport { AppDispatch, AppThunk } from '../index';\n\n\n// BOARD ACTIONS\nexport const loadBoards = (authorID: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      const boards: IBoard[] = await getBoards(authorID);\n      dispatch({\n         type: 'LOAD_BOARDS',\n         payload: { boards }\n      });\n   };\n};\n\n// export const loadBoard = (id: string): AppThunk => {\n//     return async (dispatch: AppDispatch) => {\n//         const board = await getBoard(id);\n//         dispatch({\n//             type: 'LOAD_BOARD',\n//             payload: { board }\n//         });\n//     };\n// };\n\nexport const addBoard = (authorID: string, boardTitle: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      const board = await createBoard(authorID, boardTitle);\n      dispatch({\n         type: 'ADD_BOARD',\n         payload: { boardTitle, authorID, id: board.id, columnsByID: [] }\n      });\n   };\n};\n\nexport const removeBoard = (boardID: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      await deleteBoard(boardID);\n      dispatch({\n         type: 'REMOVE_BOARD',\n         payload: { boardID }\n      });\n   }\n}\n\nexport const reorderColumns = (boardID: string, sourceIndex: number, destinationIndex: number): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      dispatch({\n         type: 'REORDER_COLUMNS',\n         payload: { boardID, sourceIndex, destinationIndex }\n      });\n      await updateColumnsOrder(boardID, sourceIndex, destinationIndex);\n   };\n};\n\nexport const loadColumnsAndNotes = (boardID: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      const data = await getColumnsAndNotes(['columns', 'notes'], boardID);\n      const [columns, notes] = data;\n      dispatch({\n         type: 'LOAD_DATA',\n         payload: { columns, notes }\n      });\n   }\n}\n\n\n// COLUMN ACTIONS\n\n// export const loadColumns = (authorID: string, boardID: string): AppThunk => {\n//     return async (dispatch: AppDispatch) => {\n//         const columns = await getColumns(authorID, boardID);\n//             dispatch({\n//                 type: 'LOAD_DATA',\n//                 payload: { columns }\n//             });\n//     };\n// };\n\nexport const addColumn = (authorID: string, name: string, boardID: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      const column = await createColumn(authorID, name, boardID);\n      dispatch({\n         type: 'ADD_COLUMN',\n         payload: { column: { name, id: column.id, boardID, notesByID: [] } }\n      });\n   };\n};\n\nexport const editColumnName = (columnID: string, columnName: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      await editColumn(columnName, columnID)\n      dispatch({\n         type: 'EDIT_COLUMN_NAME',\n         payload: { columnID, columnName }\n      });\n   };\n};\n\nexport const removeColumn = (columnID: string, boardID: string, notesIDs: string[]): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      await deleteColumn(columnID, boardID, notesIDs);\n      dispatch({\n         type: 'REMOVE_COLUMN',\n         payload: { columnID, boardID, notesIDs }\n      });\n   };\n};\n\nexport const reorderNotes = (boardID: string, noteID: string, sourceID: string, sourceIndex: number, destinationID: string, destinationIndex: number): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      dispatch({\n         type: 'REORDER_NOTES',\n         payload: { sourceIndex, destinationIndex, sourceID, destinationID }\n      });\n      await updateNotesOrder(boardID, noteID, sourceID, destinationID, sourceIndex, destinationIndex);\n   };\n};\n\n\n// NOTE ACTIONS\n\n// export const loadNotes = (authorID: string, boardID: string): AppThunk => {\n//     return async (dispatch: AppDispatch) => {\n//         const notes = await getNotes(authorID, boardID);\n//             dispatch({\n//                 type: 'LOAD_DATA',\n//                 payload: { notes }\n//             });\n//     };\n// };\n\nexport const addNote = (authorID: string, content: string, columnID: string, boardID: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      const note = await createNote(authorID, content, columnID, boardID)\n      dispatch({\n         type: 'ADD_NOTE',\n         payload: { note: { content, columnID, id: note.id, likes: [], boardID } }\n      });\n   };\n};\n\nexport const editNoteContent = (noteID: string, content: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      await editNoteText(noteID, content)\n      dispatch({\n         type: 'EDIT_NOTE_CONTENT',\n         payload: { noteID, content }\n      });\n   };\n};\n\nexport const removeNote = (noteID: string, columnID: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      await deleteNote(noteID, columnID)\n      dispatch({\n         type: 'REMOVE_NOTE',\n         payload: { noteID, columnID }\n      });\n   };\n};\n\nexport const handleLike = (noteID: string, likeAuthor: string): AppThunk => {\n   return async (dispatch: AppDispatch) => {\n      await handleLikeInNote(noteID, likeAuthor);\n      dispatch({\n         type: 'HANDLE_LIKE',\n         payload: { noteID, likeAuthor }\n      })\n   }\n};\n","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useDispatch } from 'react-redux';\nimport { removeBoard } from 'store/actions/boardActions';\n\nexport const BoardItem: FunctionComponent<{ title: string, id: string }> = ({ title, id }) => {\n    const dispatch = useDispatch();\n\n    const handleClick = (): void => {\n        dispatch(removeBoard(id));\n    }\n\n    return (\n        <div className='board-item'>\n            <Link to={`board/${id}`}>{title}</Link>\n            <button className='remove-btn'><CloseIcon className=\"icon\" onClick={handleClick}/></button>\n        </div>\n    );\n};\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'store';\nimport { addBoard, loadBoards } from 'store/actions/boardActions';\nimport './home.scss';\nimport { BoardItem } from 'components/BoardItem/BoardItem';\nimport { IBoard } from 'interfaces';\n\n\nconst Home: FunctionComponent<RouteComponentProps> = () => {\n\n    const dispatch = useDispatch();\n    const boards = useSelector((state: RootState) => state.boards);\n    const userID = useSelector((state: RootState) => state.firebase.auth.uid);\n    const [boardTitle, setBoardTitle] = useState<string>('');\n\n    useEffect(() => {\n        dispatch(loadBoards(userID));\n    }, [dispatch, userID]);\n\n    const boardsList = boards.map((board: IBoard) => {\n        return <BoardItem id={board.id} title={board.boardTitle} key={board.id}/>;\n    });\n\n    const handleAddBoard = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        e.preventDefault();\n        dispatch(addBoard(userID, boardTitle));\n        setBoardTitle('');\n    }\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setBoardTitle(e.target.value);\n    }\n\n    return (\n        <div className='boards-container'>\n            <h3 className='pick-board'>Pick a board...</h3>\n            <div className='boards-list'>\n                {!!boardsList.length ? boardsList :\n                    <p className='no-boards'>You don't have any boards. Add a new one below!</p>}\n                <form className='add-board'>\n                    <input className='add-field' placeholder='Board title..' value={boardTitle}\n                           onChange={handleChange}/>\n                    <button type='submit' className='add-btn' onClick={handleAddBoard}>Add</button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;\n","import React, { FunctionComponent } from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\n\ninterface TextareaProps {\n  onBlur: () => void,\n  value: string,\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void,\n  placeholder?: string\n}\n\nconst Textarea: FunctionComponent<TextareaProps> = ({onBlur, value, onChange, placeholder} ) => {\n\n  const moveCursorToEnd = (e: React.FormEvent<EventTarget>): void => {\n    const target = e.target as HTMLTextAreaElement;\n    const tempValue = target.value;\n    target.value = \"\";\n    target.value = tempValue;\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent, cb: Function): void => {\n    if (e.key === \"Enter\") {\n      cb();\n    }\n  };\n  return (\n      <TextareaAutosize\n          autoFocus\n          placeholder={placeholder ? placeholder : null!}\n          onBlur={onBlur}\n          value={value}\n          onChange={onChange}\n          onFocus={moveCursorToEnd}\n          onKeyDown={(e: React.KeyboardEvent) => {\n            handleKeyDown(e, onBlur);\n          }}\n      />\n  );\n};\n\nexport default Textarea;\n","import React, { FunctionComponent, useState } from 'react';\nimport { removeNote, handleLike, editNoteContent } from 'store/actions/boardActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Textarea from 'components/Textarea/Textarea';\nimport './note.scss';\nimport { Draggable, DraggableProvided } from 'react-beautiful-dnd';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { RootState } from 'store';\n\n\ntype NoteProps = {\n   id: string,\n   columnID: string,\n   index: number,\n   boardID: string,\n   content: string,\n   likes: string[]\n}\n\nconst Note: FunctionComponent<NoteProps> = (props: NoteProps) => {\n   const { id, columnID, index, content, likes } = props;\n\n   const dispatch = useDispatch();\n   const userID = useSelector((state: RootState) => state.firebase.auth.uid);\n\n   const [isLikedNote, setLikedNote] = useState<boolean>(!!likes.find((likeAuthor: string) => likeAuthor === userID));\n   const [value, setValue] = useState<string>(content);\n   const [openInput, setOpenInput] = useState<boolean>(false);\n\n\n   const handleRemoveNote = (): void => {\n      dispatch(removeNote(id, columnID));\n   };\n\n   const handleAddLike = (): void => {\n      dispatch(handleLike(id, userID));\n      setLikedNote(!isLikedNote);\n   };\n\n   const handleClick = (): void => {\n      setOpenInput(true);\n   };\n\n   const handleOnChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n      setValue(e.target.value);\n   };\n\n   const handleBlur = (): void => {\n      setOpenInput(false);\n      if (value.trim()) {\n         dispatch(editNoteContent(id, value));\n      }\n   };\n\n   return (\n       <Draggable draggableId={id} index={index}>\n          {(provided: DraggableProvided) => (\n              <div\n                  className=\"note\"\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  {...provided.dragHandleProps}>\n                 {openInput ?\n                     <Textarea\n                         value={value}\n                         onBlur={handleBlur}\n                         onChange={handleOnChange}/>\n                     : <p className=\"note-content\" onClick={handleClick}>\n                        {content}\n                     </p>}\n                 <div className=\"buttons\">\n                    <button onClick={handleRemoveNote} className=\"remove-btn\">\n                       <CloseIcon className=\"icon\" style={{ fontSize: 16 }}/>\n                    </button>\n                    <button onClick={handleAddLike} className='like-btn'>\n                       {likes && likes.length ? <span className=\"likes-amount\">{likes.length}</span> : null}\n                       <ThumbUpIcon\n                           className={isLikedNote ? 'icon liked-icon' : 'icon'}\n                           style={{ fontSize: 16 }}/>\n                    </button>\n                 </div>\n              </div>\n          )}\n       </Draggable>\n   );\n};\n\nexport default Note;\n","import React, { FunctionComponent, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './buttons.scss';\nimport Textarea from '../Textarea/Textarea';\nimport { addColumn, addNote } from 'store/actions/boardActions';\nimport AddIcon from '@material-ui/icons/Add';\nimport { useParams } from 'react-router-dom';\nimport { RootState } from 'store';\n\ninterface ButtonProps {\n    btnStyle: string,\n    columnID?: string,\n    column?: boolean\n}\n\nconst AddButton: FunctionComponent<ButtonProps> = ({ columnID, column, btnStyle }) => {\n\n    const dispatch = useDispatch();\n    const { boardID } = useParams();\n    const userID = useSelector((state: RootState) => state.firebase.auth.uid);\n\n    const [formOpen, setFormOpen] = useState<boolean>(false);\n    const [textAreaText, setText] = useState<string>('');\n\n    const handleOpenForm = (): void => {\n        setFormOpen(true);\n    };\n\n    const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n        setText(e.target.value);\n    };\n\n    const handleAddColumn = (): void => {\n        if (textAreaText.trim()) {\n            dispatch(addColumn(userID, textAreaText, boardID));\n        }\n        setText('');\n    };\n\n    const handleAddNote = (): void => {\n        if (textAreaText.trim() && columnID) {\n            dispatch(addNote(userID, textAreaText, columnID, boardID));\n        }\n        setText('');\n    };\n\n    const closeForm = (): void => {\n        setFormOpen(false);\n        !column ? handleAddNote() : handleAddColumn();\n    };\n\n    const renderForm = (): JSX.Element => {\n        const placeholder = column ? 'Enter a column title' : 'Enter a note text';\n        const btnTitle = column ? 'Add column' : 'Add note';\n        const formStyle = column ? 'column-form' : 'note-form';\n\n        return (\n            <div className={formStyle}>\n                <Textarea\n                    placeholder={placeholder}\n                    onBlur={closeForm}\n                    value={textAreaText}\n                    onChange={handleTextChange}\n                />\n                <button\n                    className=\"add-btn\"\n                    onMouseDown={column ? handleAddColumn : handleAddNote}>\n                    {btnTitle}\n                </button>\n            </div>\n        );\n    };\n\n    const renderAddButton = (): JSX.Element => {\n        const buttonText = column ? 'New column' : 'Create a note';\n        return (\n            <button className={btnStyle} onClick={handleOpenForm}>\n                <AddIcon className=\"plus-icon\"/>\n                {buttonText}\n            </button>\n        );\n    };\n\n    return formOpen ? renderForm() : renderAddButton();\n};\n\nexport default AddButton;\n","import React, { FunctionComponent, useState } from 'react';\nimport Note from '../Note/Note';\nimport AddButton from 'components/AddButton/AddButton';\nimport { removeColumn, editColumnName } from 'store/actions/boardActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Droppable, Draggable, DroppableProvided, DraggableProvided } from 'react-beautiful-dnd';\nimport './column.scss';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Textarea from 'components/Textarea/Textarea';\nimport { RootState } from 'store';\nimport { IColumn, INote } from 'interfaces';\n\ntype ColumnProps = {\n   id: string,\n   index: number,\n   boardID: string\n}\n\nconst Column: FunctionComponent<ColumnProps> = ({ id, index, boardID }) => {\n\n   const dispatch = useDispatch();\n   const column = useSelector((state: RootState) => state.columns.find((column: IColumn) => column.id === id))\n   const notes = useSelector((state: RootState) => state.notes);\n\n   const [value, setValue] = useState<string>(column ? column.name : '');\n   const [openInput, setOpenInput] = useState<boolean>(false);\n\n   const handleRemoveColumn = (): void => {\n      dispatch(removeColumn(id, boardID, column.notesByID));\n   };\n\n   const handleClick = (): void => {\n      setOpenInput(true);\n   };\n\n   const handleOnChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n      setValue(e.target.value);\n   };\n\n   const handleBlur = (): void => {\n      setOpenInput(false);\n      if (value.trim()) {\n         dispatch(editColumnName(id, value));\n      }\n   };\n\n   const noteList = column && column.notesByID ? column.notesByID.map((noteID: string, index: number) => {\n      const noteData = notes.find((note: INote) => note.id === noteID);\n      return <Note key={noteID} id={noteID} {...noteData} index={index} columnID={id} boardID={boardID}/>;\n   }) : null;\n\n   return (\n       column ?\n           <Draggable draggableId={id} index={index}>\n              {(provided: DraggableProvided) => (\n                  <div\n                      className=\"column-board\"\n                      {...provided.draggableProps}\n                      ref={provided.innerRef}\n                      {...provided.dragHandleProps}\n                  >\n                     {openInput ? (\n                         <Textarea\n                             value={value}\n                             onChange={handleOnChange}\n                             onBlur={handleBlur}\n                         />\n                     ) : (\n                         <h4 className=\"column-name\" onClick={handleClick}>\n                            {column ? column.name : null}\n                         </h4>\n                     )}\n\n                     <button className=\"remove-btn col\" onClick={handleRemoveColumn}>\n                        <DeleteIcon className=\"trash-icon\"/>\n                     </button>\n                     <Droppable droppableId={id}>\n                        {(provided: DroppableProvided) => (\n                            <div\n                                {...provided.droppableProps}\n                                ref={provided.innerRef}\n                                className=\"notes-container\"\n                            >\n                               {noteList}\n                               {provided.placeholder}\n                               <AddButton columnID={id} btnStyle=\"create-note\"/>\n                            </div>\n                        )}\n                     </Droppable>\n                  </div>\n              )}\n           </Draggable> : null);\n};\n\nexport default Column;\n","import React, { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './board.scss';\nimport Column from 'components/Column/Column';\nimport AddButton from 'components/AddButton/AddButton';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { RouteComponentProps, useParams } from 'react-router-dom';\nimport { RootState } from 'store';\nimport { loadBoards, loadColumnsAndNotes, reorderColumns, reorderNotes } from 'store/actions/boardActions';\nimport { CircularProgress } from '@material-ui/core';\nimport { IBoard } from 'interfaces';\n\nconst Board: FunctionComponent<RouteComponentProps> = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const { boardID } = useParams();\n    const board = useSelector((state: RootState) => state.boards.find((board: IBoard) => board.id === boardID));\n    const userID = useSelector((state: RootState) => state.firebase.auth.uid);\n\n    useEffect(() => {\n        if (!board) {\n            dispatch(loadBoards(userID));\n        }\n        dispatch(loadColumnsAndNotes(boardID));\n    }, []);\n\n    const handleDragEnd = (result: any): void => {\n        const { destination, source, draggableId, type } = result;\n        if (!destination) {\n            return;\n        }\n        if (type === 'list') {\n            dispatch(reorderColumns(boardID, source.index, destination.index));\n        } else {\n            dispatch(reorderNotes(boardID, draggableId, source.droppableId, source.index, destination.droppableId, destination.index))\n        }\n    };\n\n    const columnList = board && board.columnsByID ? board.columnsByID.map((columnID: string, index: number) => {\n        return (\n            <Column key={columnID} id={columnID} index={index} boardID={boardID}/>\n        )\n    }) : null;\n\n    return (\n        board ?\n            <div className='board-container'>\n                <h3 className='board-title'>{board ? board.boardTitle : null}</h3>\n                <DragDropContext onDragEnd={handleDragEnd}>\n                    <div className=\"board\">\n                        <Droppable direction=\"horizontal\" type=\"list\" droppableId=\"all-list\">\n                            {provided => (\n                                <div\n                                    className=\"column-container\"\n                                    ref={provided.innerRef}\n                                    {...provided.droppableProps}>\n                                    {columnList}\n                                    {provided.placeholder}\n                                    <AddButton column btnStyle=\"add-column\"/>\n                                </div>\n                            )}\n                        </Droppable>\n                    </div>\n                </DragDropContext>\n            </div>\n            : (<div className='loading-wrapper'><CircularProgress size={200}/></div>)\n    );\n};\n\nexport default Board;\n","import React, { FunctionComponent } from 'react';\nimport './App.scss';\nimport { useSelector } from 'react-redux';\nimport { HashRouter, Switch } from 'react-router-dom';\nimport AuthIsLoaded from './components/AuthIsLoaded/AuthIsLoaded';\nimport Layout from './components/Layout/Layout';\nimport PublicRoute from './components/Routes/PublicRoute';\nimport ProtectedRoute from './components/Routes/ProtectedRoute';\nimport Login from './views/Login/Login';\nimport Register from './views/Register/Register';\nimport Home from './views/Home/Home';\nimport Board from './views/Board/Board';\nimport { isAuth } from 'store/reducers/authReducer';\n\n\nexport const App: FunctionComponent = (): JSX.Element => {\n\n   const auth = useSelector(isAuth);\n   const isAuthUser = !!auth.uid;\n\n   return (\n       <div className=\"App\">\n          <HashRouter basename='/'>\n             <AuthIsLoaded>\n                <Layout>\n                   <Switch>\n                      <PublicRoute component={Login} path='/login' exact isAuth={isAuthUser}/>\n                      <PublicRoute component={Register} path='/register' exact isAuth={isAuthUser}/>\n                      <ProtectedRoute component={Home} path='/' exact isAuth={isAuthUser}/>\n                      <ProtectedRoute component={Board} path='/board/:boardID' exact isAuth={isAuthUser}/>\n                   </Switch>\n                </Layout>\n             </AuthIsLoaded>\n          </HashRouter>\n       </div>\n   );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { store } from 'store';\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { reduxFirebase } from './firebase/fb.config';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n   <Provider store={store}>\n      <ReactReduxFirebaseProvider {...reduxFirebase}>\n         <App/>\n      </ReactReduxFirebaseProvider>\n   </Provider>,\n   document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}